#Numpy 패키지 함수와 속성
- 배열 속성
    arange : 인덱스 나열 (a.arange(15).reshape(3, 5))
    dtype : 요소들의 type (a.dtype) / a.dtype.name)
    itemsize : 한 요소의 bytesize (a.itemsize)
    ndim : 차원수(축수) (a.ndim)
    size : 배열 요소 갯수 (a.size)
    shape : 배열 구조 (튜플) (a.shape)
    
- 배열 생성함수
    np.array(obj, dtype, copy=True/False) : 기본값은 t 오브젝트와 같은 차원의 배열이 만들어짐
    np.array(obj, dtype, copy=True/False).reshape(구조: 1차원~3차원 마음대로)
    *np.ones(tup, dtype=float) : 무조건 1로 들어감
    *np.zeros(tup, dtype) : 무조건 0으로 들어감
    np.full(tup, 초기화) : 초기값이 들어감
    np.empty(tup, dtype)
    *np.random.random(tup) : 0~1미만 균등분포를 갖는 랜덤값배열(난수배열)
    np.random.uniform(low=0, high=1, size=tup) : low값~high미만 균등분포를 갖는 랜덤값배열(난수배열)
    np.random.normal(loc=0, scale=1.0, size=tup) : 평균loc, 표준편차scale의 정규분포를 갖는 난수배열
    np.random.rand(n) : 균등분포의 1차원 난수 배열(난수 갯수 n개)
    np.random.randn(n) : 표준정규분포 1차원 난수 배열(난수 갯수 n개)
    np.linspace(from, to, count, dtype) : from부터 to까지(to포함) count개 1차원 배열
    np.arange(from, stop, step) : from부터 stop앞까지 step씩 증감하는 1차원 배열

 - 배열의 차원 변경
    reshape([면수], 행수, 열수,) : -1 사용하면 자동계산 (행,열 입력하면 리스트로바꿔줌)
    resize(tup) : -1 사용불가. 
    ravel(), flatten() : 1차원 변경
    transpose()나 T : 전치행렬(행과 열을 뒤바뀐 행렬로 반환해줌(행, 열 바꾸기)
    array[: np.newaxis] == np.expand_dims(array, axis=1) : 차원 증가

  ###배열연산
    - 요소별 연산, 브로드캐스팅
    - 행렬연산(2차원) @(dot함수), 단위행렬(정방행렬)
    - 범용함수 np.add(), np.multupley(), np.substract(), np.sqrt()

  ###배열합치기
    - np.vstack(tup) 
    - np.hstack(tup) 
    - np.dstack(tup) : 마지막 축(열)들끼리 합침

    - np.column_stack(tup) : 1차원 배열을 열단위로 배열하여 2차원으로 합침
    - np.row_stack(tup) : 행단위로 합침
    - np.stack(tup, axis=)

    - np.r_[a,b] : row단위로 쌓음
    - np.c_[a,b] : 컬럼으로 쌓아서 합침

  ###배열 분리하기
    - np.vsplit(array, 정수나 인덱스벡터) == np.split(array, 정수나 인덱스벡터, axis=0)
    - np.hsplit(array, 정수나 인덱스벡터) == np.split(array, 정수나 인덱스벡터, axis=1)
    - np.dsplit(array, 정수나 인덱스벡터) == np.split(array, 정수나 인덱스벡터, axis=2or-1)
    - np.array_split(array, 정수나 인덱스벡터, axis=) : 나눠지지 않는 정수로도 분리(split) 가능

배열 저장 pkl, npy

딥러닝모델 저장 h5, keras

머신러닝 모델 저장 pkl, joblib

from matplotlib import pyplot as plt
%matplotlib inline
plt.imshow(img_data. interpolation='nearest')
plt.show()

([[0,0,0],
 [255,0,0],
 [0,255,0],
 [0,0,255],
 [255,255,255]])

([[4,4,4,0,0,0,0,4,4,4],
 [4,0,0,4,4,4,4,0,0,4],
 [0,0,4,4,4,4,4,4,0,0],
 [0,4,4,1,4,4,3,4,4,0],
 [0,4,4,1,4,4,3,4,4,0],
 [0,4,4,4,4,4,4,4,4,0],
 [0,4,4,2,4,4,2,4,4,0],
 [4,0,4,4,2,2,4,4,0,4],
 [4,4,0,4,4,4,4,0,4,4],
 [4,4,4,0,0,0,0,4,4,4]])

