1절. 리스트 : lst = [타입과 관련없는 0개 이상의 데이터들]
	len(lst) : 요소 갯수
	min(lst), max(lst), sum(lst), sorted(lst, reverse=True) : 최소, 최대, 합, 정렬
	data in lst : lst안에 data 요소가 있는지 여부 있으면 True, 없으면 False
	lst[idx], lst[from:stop:step] 인덱싱과 슬라이싱
	추가 : lst.append(value), lst.insert(idx, value), lst.extend(another_lst)
	삭제 : lst.pop(), lst.pop(idx), lst.remove(data)
	위치찾기 : lst.index(data), lst.count(data)
	정렬 : lst.sort(reverse=True) : 리스트 내용이 변경됨
	역순 : lst.reverse() : 리스트 내용이 변경됨

2절. 튜플 : tup = (data, ) 수정 불가 (스칼라데이터가 안되므로 하나일경우 반드시 쉼표)
	len(tup) : 요소 갯수
	min(tup), max(tup), sum(tup), sorted(tup, reverse=True) : 최소, 최대, 합, 정렬
	data in tup : tup안에 data 요소가 있는지 여부 있으면 True, 없으면 False
	tup[idx], tup[from:stop:step] 인덱싱과 슬라이싱
	위치찾기 : tup.index(data), tup.count(data)
	
리스트와 유사하지만, 읽기전용. 수정이 필요없는 데이터에서 사용
수정불가하므로, 튜플에 데이터 수정, 추가, 삭제 불가 (제공되는 함수도 많지 않다)
(), tuple() 이용해서 생성

3절. 딕셔너리 dic = {key1:value1, key2:value2, ...}
	읽기 : dic[key1],	dic.get(key1)
	수정 : dic[key1] = 수정할 데이터
	제거 : del dic[key1], dic.pop(key1)
	추가 : dic[key9] = value 9
	dic.keys() / dic.values() / dic.items()

4절. 셋(set) s = {data1, data2, data1} : 중복이 안되므로 {data1, data2} 중복허용안함/순서없음(인덱스 없음)
	추가 : add(스칼라데이터), update(데이터구조)
	삭제 : remove(삭제할 데이터)
	연산 : &(교집합), |(합집합), -(차집합)
데이터 구조를 for 문을 이용하여 출력할 경우 enumerate를 사용한다.